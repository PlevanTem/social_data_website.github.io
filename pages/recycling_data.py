import pandas as pd
import streamlit as st

# -*- coding: utf-8 -*-
"""NYC recycling.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WribDE9_nT0oYOzD-FXDyTCYzAuRvVdC

# Preparation
"""

# Commented out IPython magic to ensure Python compatibility.
# import libraries
import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import matplotlib.lines as mlines
# %matplotlib inline

import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.io as pio
# set plotly default theme
pio.templates.default = 'plotly_white'

from bokeh.plotting import figure
from bokeh.palettes import Spectral11
from bokeh.io import show, output_notebook, reset_output, curdoc
from bokeh.models import  ColumnDataSource, Legend, HoverTool
from bokeh.layouts import layout
from bokeh.models.widgets import Tabs, Panel
from bokeh.models.mappers import ColorMapper, LinearColorMapper

from branca.colormap import linear
from folium.plugins import TimeSliderChoropleth
import folium
from streamlit_folium import folium_static

from datetime import datetime
#from IPython.display import display
import warnings
warnings.filterwarnings("ignore")

#python -m pip install folium matplotlib mapclassify

"""# Collection
[Discover how we care for all five boroughs with our reliable services.](https://www1.nyc.gov/assets/dsny/site/services)   
[Dataset source](https://data.cityofnewyork.us/City-Government/DSNY-Monthly-Tonnage-Data/ebb7-mvp5)
"""

df_monthly_collection_tonnage = pd.read_csv('data/DSNY_Monthly_Tonnage_Data.csv')

df_monthly_collection_tonnage.shape

df_monthly_collection_tonnage.head()

"""## Preprocessing

### DATE column
"""

from datetime import datetime # import datetime module
df_monthly_collection_tonnage['MONTH'] = df_monthly_collection_tonnage.MONTH.apply(lambda x:datetime.strptime(x,'%Y / %m'))
df_monthly_collection_tonnage['MONTH'] = pd.to_datetime(df_monthly_collection_tonnage['MONTH'], unit='s')
df_monthly_collection_tonnage.rename(columns={'MONTH':'DATE'},inplace=True) # modify column name

"""### Interested column"""

df_by_category = df_monthly_collection_tonnage[['DATE','BOROUGH','REFUSETONSCOLLECTED','PAPERTONSCOLLECTED','MGPTONSCOLLECTED','RESORGANICSTONS','SCHOOLORGANICTONS','LEAVESORGANICTONS','XMASTREETONS']]
# total amount of trash and source-seperated recycled materials collected
df_monthly_collection_tonnage['TOTALCOLLECTED'] = df_monthly_collection_tonnage.iloc[:,3:-1].sum(1)
df_monthly_collection_tonnage = df_monthly_collection_tonnage[['DATE','BOROUGH','COMMUNITYDISTRICT','BOROUGH_ID','TOTALCOLLECTED']]

"""### Drop missing values"""

df_monthly_collection_tonnage[df_monthly_collection_tonnage.isna().T.any()]

df_monthly_collection_tonnage.dropna(inplace=True)
mask = ((df_monthly_collection_tonnage['DATE'] >= '2015-01-01') & (df_monthly_collection_tonnage['DATE'] < '2022-01-01')) # start date
df_monthly_collection_tonnage = df_monthly_collection_tonnage[mask]

mask2 = ((df_by_category['DATE'] >= '2015-01-01') & (df_by_category['DATE'] < '2022-01-01')) # start date
df_by_category = df_by_category[mask2]

"""## Exploratory Data Analysis
https://gis.stackexchange.com/questions/173835/point-in-polygon-geojson-using-shapely-python-returning-incorrect-results
"""

fig0 = px.bar(df_by_category.iloc[:,1:].groupby('BOROUGH').count())
fig0.update_layout(title_text='NYC average collection amount(T) by category from 2015 to 2021',
         legend_title="Collection Type",)
fig0.show()

"""**Findings:**   
1. 
"""

fig1 = px.bar(df_by_category.groupby('BOROUGH').mean())
fig1.update_layout(title_text='NYC average collection amount(T) by category from 2015 to 2021',
         legend_title="Collection Type",)
fig1.show()

"""**Findings**:   
1. We can see that [Staten Island](https://en.wikipedia.org/wiki/Staten_Island#Demographics) is the largest collection producer region, while interestingly it has the least population among these 5 boroughs. By contrast, [Bronx](https://en.wikipedia.org/wiki/The_Bronx) has the least total collection and its GDP ranks the lowest among these 5 regions. 
2. The 5 boroughs had similar collection pattern. Trash or refuse is the No.1 type of collection, accounting for more than half of the total collection, following by paper usage and MGP products(recyclable metal, glass, plastic, and beverage cartons), while by contrast school organic and leave organic (materials that separated by residents before they are set out for collection) still collected very low compared to other collections.

### Temporal patterm
"""

def plot_lines_multi(df,lw=2,pw=800,ph=500,t_str="hover,save,pan,box_zoom,reset",t_loc='above'):
    ''' Function to plot multiple lines with bokeh
    '''
    df.index = df.DATE
    df = df._get_numeric_data()
    source = ColumnDataSource(df)
    col_names = source.column_names[1:] #numeric column names

    p = figure(x_axis_type="datetime", 
            plot_width=pw, 
            plot_height=ph,
            y_range=(0,7000),
            y_axis_label='Tonnage',
            toolbar_location=t_loc, 
            tools=t_str, title="No. of different types of collection by district",)
    
    p_dict = dict() # store each collection line
    # set line color for each collection type
    numlines = len(col_names)
    mypalette=Spectral11[0:numlines]

    for col, c, col_name in zip(df.columns,mypalette,col_names):
        p_dict[col_name] = p.line(x='DATE',y=col,source=source,color=c,line_width=lw)
        p.add_tools(HoverTool(
            renderers=[p_dict[col_name]],
            tooltips=[('Date','@DATE{%F}'),('Type', f'{col_name}'),('Collection tonnage',f'@{col}')],
            formatters={'@DATE': 'datetime'}
        ))
    legend = Legend(items=[(x, [p_dict[x]]) for x in p_dict])
    p.add_layout(legend,'right')
    p.legend.click_policy = "mute"
    return p

df = df_by_category.groupby(['BOROUGH','DATE']).mean().reset_index()
p1 = plot_lines_multi(df[df.BOROUGH == 'Bronx'].round())
p2 = plot_lines_multi(df[df.BOROUGH == 'Brooklyn'].round())
p3 = plot_lines_multi(df[df.BOROUGH == 'Manhattan'].round())
p4 = plot_lines_multi(df[df.BOROUGH == 'Queens'].round())
p5 = plot_lines_multi(df[df.BOROUGH == 'Staten Island'].round())

# set the layout for the plots and add them to three tabs for the three categories
tab1 = Panel(child=p1,title="Bronx")
tab2 = Panel(child=p2,title="Brooklyn")
tab3 = Panel(child=p3,title="Manhattan")
tab4 = Panel(child=p4,title="Queens")
tab5 = Panel(child=p5,title="Staten Island")
tabs = Tabs(tabs=[tab1, tab2, tab3, tab4, tab5])
curdoc().add_root(tabs)

#display plot
show(tabs)

"""**Findings**:   
We can see that, overally, the amount of collection of different categories increased slowly from 2015 to 2022. Staten island showed a more dramatic change between the 7 collection categories than the other boroughs.

**Preparation for geodata:**  
We can see the [index](https://furmancenter.org/files/sotc/SOC2007_IndexofCommunityDistricts_000.pdf) of each community district is given by BOROUGH_ID+COMMUNITYDISTRICT number. So we can make use of this rule to index the coordinates of these districts.

![NYC Community District](https://drive.google.com/uc?export=view&id=1K71Jhysf9V2PLpUt7m0Qoz7W0g0yGCey)
"""

# create a Borough_Community code column
df_monthly_collection_tonnage['BOR_CD'] = df_monthly_collection_tonnage[['COMMUNITYDISTRICT','BOROUGH_ID']]\
                                                 .apply(lambda x:int(x.BOROUGH_ID*100)+int(x.COMMUNITYDISTRICT),axis=1)

df_borcd_collected = df_monthly_collection_tonnage.groupby(['BOR_CD','DATE','BOROUGH'])['TOTALCOLLECTED'].mean().reset_index()
df_borcd_collected.head()

def readJson(url):
    import urllib.request
    import json
    """
    Returns a json file specified in @url.
    """
    response = urllib.request.urlopen(url)
    return json.loads(response.read())


def readCSV(url):
    """
    Returns a csv file specified in @url.
    """
    response = urllib.request.urlopen(url)
    return csv.DictReader(response, delimiter=',') 

def getRegions():
    """
    Returns a dictionary formed by the id of a community district and its coordinates.
    """
    dict = {}
    # (longitude, latitude)
    url = "https://nycdatastables.s3.amazonaws.com/2013-08-19T18:22:23.125Z/community-districts-polygon.geojson"
    data = readJson(url)
    for district in data['features']:
        cd_id = district['properties']['communityDistrict'] # get the code of each community district
        dict[cd_id] = district['geometry'] # key: district code; value: geometry coordinates

    return dict

url = "https://nycdatastables.s3.amazonaws.com/2013-08-19T18:22:23.125Z/community-districts-polygon.geojson"
nyc_cd_geojson = readJson(url) # NYC community district geojson
nycgeo = getRegions() # NYC community districts geo data(datatype: Polygon)

nycgeo.keys()

"""### Plotly
https://deepnote.com/@carlos-mendez/PYTHON-Labeled-and-interactive-maps-fd02ec5d-16f4-4ca0-b2c1-4f9aa03751e4
"""

from shapely.geometry import Polygon
# match geometry polygon coordinates from nyc community district geojson
parsed_data = [Polygon(item['geometry']['coordinates'][0]) for item in nyc_cd_geojson['features']]
df_borcd_collected['geometry'] = df_borcd_collected.apply(lambda x:Polygon(nycgeo[x.BOR_CD]['coordinates'][0]),axis=1)

#df_borcd_collected.head()

"""pandas DataFrame To GeoDataFrame"""

import geopandas as gpd
df = df_borcd_collected
df = gpd.GeoDataFrame(df, crs="EPSG:4326", geometry='geometry') # transform dataframe to geodataframe
df.BOR_CD = df.BOR_CD.astype('str') # so colorbar would not treat BOR_CD as 
df['date_str'] = df['DATE'].apply(lambda x: str(x)) # create a str date column

#df.head()

collect_avg_by_cd = df.groupby(["BOROUGH",'BOR_CD']).mean().reset_index()
# match geometry polygon coordinates from nyc community district geojson
collect_avg_by_cd['geometry'] = collect_avg_by_cd.apply(lambda x:Polygon(nycgeo[int(x.BOR_CD)]['coordinates'][0]),axis=1)
collect_avg_by_cd.head()

fig2 = px.bar(collect_avg_by_cd.sort_values(by='TOTALCOLLECTED',ascending=False),
            x="BOR_CD", y="TOTALCOLLECTED", \
            color='TOTALCOLLECTED', \
            color_continuous_scale=px.colors.sequential.deep,
            title='NYC Average Recycled Collection Amount of 59 Community Districts, from 1992-2021', height=600)

fig2.update_yaxes(title_text='Total Collected Resources(T)',ticksuffix="T") # customize y label tick

#fig2.show()

"""**Findings**:  
Community 412 is the most recycled collection origin, with around 8000T materials collected, while community 101 had the least collection, with only about 1/4 of 412's collection.
"""

# The df consist of monthly data of collection
# To  , each year we only select data from January
df_by_year = df[df.DATE.apply(lambda x:x.month==1)].sort_values(by='DATE')

import plotly.express as px
figsize=(20, 10)

fig3 = px.choropleth_mapbox(df_by_year,
          geojson=nyc_cd_geojson, 
          locations=df_by_year.BOR_CD,
          featureidkey="properties.communityDistrict",
          center = {"lat": 40.70, "lon": -73.94},
          mapbox_style="carto-positron",
          opacity=0.5,
          color='TOTALCOLLECTED',
          hover_name="BOROUGH",
          color_continuous_scale=px.colors.sequential.deep,
          zoom=9, range_color=(0,9000),
          title='NYC Recycled Collection Amount of 59 Community Districts, from 1992-2021',
          animation_frame="date_str")
              
fig3.update_geos(fitbounds="locations", visible=True)
fig3.update_layout(margin={"r":0,"t":0,"l":0,"b":0})
fig3.update_layout(
    title_text='The Average Amount of NYC Recycled Collection by Community District'
)

#fig3.show()

"""### folium/Geopandas
https://geopandas.org/en/stable/gallery/polygon_plotting_with_folium.html
https://geohackweek.github.io/ghw2018_web_portal_inlandwater_co2/InteractiveTimeSeries.html   
https://jingwen-z.github.io/how-to-draw-a-variety-of-maps-with-folium-in-python/

"""

df_bins = pd.read_csv('https://data.cityofnewyork.us/resource/sxx4-xhzg.csv')
df_bins.borough = df_bins.borough.apply(lambda x:'Brooklyn' if x=='Brooklyn ' else x)

df_bins.head()

df_bins.dropna(inplace=True)

def boroughcolors(df):
    if df['borough'] == 'Bronx':
        return 'green'
    elif df['borough'] == 'Queens':
        return 'blue'
    elif df['borough'] == 'Manhattan':
        return 'black'
    elif df['borough'] == 'Brooklyn':
        return 'red'
    else:
        return 'pink'

df_bins["color"] = df_bins.apply(boroughcolors, axis=1)
df_bins.head()

locations = df_bins[['latitude', 'longitude']]
locationlist = locations.values.tolist()
len(locationlist)
locationlist[0]

colormap = linear.YlGnBu_09.scale(min(collect_avg_by_cd['TOTALCOLLECTED']),max(collect_avg_by_cd['TOTALCOLLECTED']))

style_function = lambda x: {
    'fillColor': colormap(int(x['properties']['BOR_CD'])),
    'color': 'balck',
    'fillOpacity': 0.7
}

m = folium.Map(location=[40.70, -73.94], zoom_start=10, tiles='CartoDB positron')

for point in range(0, len(locationlist)):
    folium.Marker(locationlist[point], 
        popup=df_bins['park_site_name'].iloc[point],
        # icon address: https://lab.artlung.com/font-awesome-sample/
        icon=folium.Icon(icon='recycle', prefix='fa', color=df_bins['color'].iloc[point]),
        tooltip=df_bins['address'].iloc[point],
    ).add_to(m)

folium.GeoJson(
    collect_avg_by_cd,
    style_function=style_function,
    tooltip=folium.GeoJsonTooltip(
        fields=['TOTALCOLLECTED', 'BOROUGH', 'BOR_CD'],
        aliases=['Total collection', 'Borough', 'Community district'],
        localize=True
    )
).add_to(m)

colormap.add_to(m)
colormap.caption = 'Recycled collection amount'
colormap.add_to(m)

#m

df_bins.groupby('borough')['site_type'].count()\
    .sort_values().plot(kind='bar',
              title='No. of trash bins in 5 boroughs',
              color=['green','pink','red','blue','black'])
              
   

def app():
    st.markdown('# NYC Recycling')
    st.markdown('## Reducing Emissions from Our Waste Stream and Advancing a Circular Economy')
    st.markdown('NYC works on reusing and recycling all kinds of materials, reducing truck traffic, and transitioning toward a circular economy')
    st.markdown('Let\'s see what they did to sort, collect and recycle disposals!')
    
    st.markdown(
        """
        *What we focus on is collection tonnages from NYC residences and instructions at 5 NYC boroughs along with time and geographical information.**
        - [source1](https://data.cityofnewyork.us/City-Government/DSNY-Monthly-Tonnage-Data/ebb7-mvp5)
        - [source2](https://data.cityofnewyork.us/resource/sxx4-xhzg.csv)
        """
    )
    
    st.markdown('## NYC collection types and majority of waste')
    st.plotly_chart(fig1)
    st.markdown(
        """
        From the past 6 years collection history, we can see that [Staten Island](https://en.wikipedia.org/wiki/Staten_Island#Demographics) 
        is the largest collection producer region, while interestingly it has the least population among these 5 boroughs. 
        By contrast, [Bronx](https://en.wikipedia.org/wiki/The_Bronx) has the least total collection and its GDP ranks the lowest among these 5 regions. 
        Secondly, the 5 boroughs had similar collection pattern. Trash or refuse is the No.1 type of collection, accounting for more than half of the total collection, following by paper usage and MGP products(recyclable metal, glass, plastic, and beverage cartons), while by contrast school organic and leave organic (materials that separated by residents before they are set out for collection) still collected very low compared to other collections.  
        """
    )
    
    st.markdown('## Collection comparison between 5 NYC boroughs, who performs better?')
    st.bokeh_chart(tabs, use_container_width=True)
    st.markdown(
        '''
        **Findings**:   
            We can see that, overally, the amount of collection from different categories increased slowly from 2015 to 2022. 
            Looking at the ups and downs of collection tonnages among the whole time range, waste and disposal collection service follows a seasonal pattern, indicating around
            January collection service is less active, while in June they collect the most. In addition, there is a increase trend of recycling and collection amount in the past 7 years.            
            Staten island was the largest recycler and collector which also showed a more dramatic change between the 7 collection categories than the other boroughs.
            By comparison, Manhattan didn't change much in terms of all the 7 types of collection.
        '''
    )
    
    st.markdown('## Insights about New York City community districts - who\'s the largest and least disposal maker?')
    st.plotly_chart(fig2)
    st.markdown(
        '''
        The top 5 largest collected districts is Community 412,407,503,312 and 108.
        while community 105,202,101,201,203 had the least collection tonnages.
        **We wonder that is the more collection, the cleaner the district?**
        So we checked [NYC Community District Profiles site](https://share.streamlit.io/plevantem/social_data_website.github.io/main/app.py)
        Interestingly, we can see that among the top5 disposal collected district, 312, Brooklyn ranked low in terms of street cleaniess and 
        disposal and recyle collection tonnages is not a good indicator for street cleanies and water quality.
        According to the map, the western part of NYC in Manhattan were usually with less waste collection, combined with the NYC community district profile,
        to some extent it relateds to the number local population of each district.
        '''
    )
    st.plotly_chart(fig3)
    st.markdown('From the map above, it\'s easier to compare the collection amount between 59 NYC communities and see the change by draging the slider.')
    
   
    st.markdown('## Trash bin map with collection tonnages by district')
    
    folium_static(m)
    
    st.markdown(
        '''
        Take a loot at the number of trash bins at different districts,
        we can find that Manhattan had the most trash bins but it collected the least
        than the other 4 boroughs.
        '''
    )
    st.markdown(
        """
        **The total number of trash bins by borough**
        """
    )
    st.bar_chart(
        df_bins.groupby('borough')['site_type'].count().sort_values()
    )
    
